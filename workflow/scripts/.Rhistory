rm(list = ls())
library(yaml)
library(readr)
library(dplyr)
# Snakemake gère les fichiers d'entrée et de sortie
csv_file <- "../resources/data/seq.csv"  # Fichier CSV en entrée
output_yaml <- "../resources/datavzrd/seq.yaml"  # Fichier YAML en sortie
delimiter <- ";"  # Ajustez si nécessaire
# Charger le fichier CSV pour détecter les colonnes
df <- read_delim(csv_file, delim = delimiter) %>%
dplyr::rename(Cluster=seq.part_dynamic_diss_best)%>%
mutate(across(everything(), ~na_if(., "%")))
# Construire la structure du YAML
config <- list(
"__use_yte__" = "true",
"datasets" = list(
"seq" = list(
"path" = "?input.table",
"separator" = delimiter
)
),
"views" = list(
"seq" = list(
"dataset" = "seq",
"render-table" = list(
"columns" = list()
)
)
)
)
# Ajouter les colonnes après dataset et render-table
for (col in names(df)) {
config$views$seq$`render-table`$columns[[col]] <- list(
"plot" = list(
"heatmap" = list(
"scale" = "ordinal",
"color-scheme" = "category10"
)
)
)
}
# Enregistrer le fichier YAML
write_yaml(config, output_yaml)
cat(sprintf("File %s has been created !\n", output_yaml))
rm(list = ls())
library(yaml)
library(readr)
library(dplyr)
# Snakemake gère les fichiers d'entrée et de sortie
csv_file <- "../resources/data/seq.csv"  # Fichier CSV en entrée
output_yaml <- "../resources/datavzrd/seq.yaml"  # Fichier YAML en sortie
delimiter <- ";"  # Ajustez si nécessaire
use_yte <- "true"
# Charger le fichier CSV pour détecter les colonnes
df <- read_delim(csv_file, delim = delimiter) %>%
dplyr::rename(Cluster=seq.part_dynamic_diss_best)%>%
mutate(across(everything(), ~na_if(., "%")))
# Construire la structure du YAML
config <- list(
"__use_yte__" = use_yte,
"datasets" = list(
"seq" = list(
"path" = "?input.table",
"separator" = delimiter
)
),
"views" = list(
"seq" = list(
"dataset" = "seq",
"render-table" = list(
"columns" = list()
)
)
)
)
# Ajouter les colonnes après dataset et render-table
for (col in names(df)) {
config$views$seq$`render-table`$columns[[col]] <- list(
"plot" = list(
"heatmap" = list(
"scale" = "ordinal",
"color-scheme" = "category10"
)
)
)
}
# Enregistrer le fichier YAML
write_yaml(config, output_yaml)
cat(sprintf("File %s has been created !\n", output_yaml))
unquote(use_yte)
eval(use_yte)
rm(list = ls())
library(yaml)
library(readr)
library(dplyr)
# Snakemake gère les fichiers d'entrée et de sortie
csv_file <- "../resources/data/seq.csv"  # Fichier CSV en entrée
output_yaml <- "../resources/datavzrd/seq.yaml"  # Fichier YAML en sortie
delimiter <- ";"  # Ajustez si nécessaire
use_yte <- TRUE
# Charger le fichier CSV pour détecter les colonnes
df <- read_delim(csv_file, delim = delimiter) %>%
dplyr::rename(Cluster=seq.part_dynamic_diss_best)%>%
mutate(across(everything(), ~na_if(., "%")))
# Construire la structure du YAML
config <- list(
"__use_yte__" = use_yte,
"datasets" = list(
"seq" = list(
"path" = "?input.table",
"separator" = delimiter
)
),
"views" = list(
"seq" = list(
"dataset" = "seq",
"render-table" = list(
"columns" = list()
)
)
)
)
# Ajouter les colonnes après dataset et render-table
for (col in names(df)) {
config$views$seq$`render-table`$columns[[col]] <- list(
"plot" = list(
"heatmap" = list(
"scale" = "ordinal",
"color-scheme" = "category10"
)
)
)
}
# Enregistrer le fichier YAML
write_yaml(config, output_yaml)
cat(sprintf("File %s has been created !\n", output_yaml))
rm(list = ls())
library(yaml)
library(readr)
library(dplyr)
# Snakemake gère les fichiers d'entrée et de sortie
csv_file <- "../resources/data/seq.csv"  # Fichier CSV en entrée
output_yaml <- "../resources/datavzrd/seq.yaml"  # Fichier YAML en sortie
delimiter <- ";"  # Ajustez si nécessaire
use_yte <- TRUE
# Charger le fichier CSV pour détecter les colonnes
df <- read_delim(csv_file, delim = delimiter) %>%
dplyr::rename(Cluster=seq.part_dynamic_diss_best)%>%
mutate(across(everything(), ~na_if(., "%")))
# Construire la structure du YAML
config <- list(
"__use_yte__" = use_yte,
"datasets" = list(
"seq" = list(
"path" = "?input.table",
"separator" = I(delimiter)
)
),
"views" = list(
"seq" = list(
"dataset" = "seq",
"render-table" = list(
"columns" = list()
)
)
)
)
# Ajouter les colonnes après dataset et render-table
for (col in names(df)) {
config$views$seq$`render-table`$columns[[col]] <- list(
"plot" = list(
"heatmap" = list(
"scale" = "ordinal",
"color-scheme" = "category10"
)
)
)
}
# Enregistrer le fichier YAML
write_yaml(config, output_yaml)
cat(sprintf("File %s has been created !\n", output_yaml))
rm(list = ls())
library(yaml)
library(readr)
library(dplyr)
# Snakemake gère les fichiers d'entrée et de sortie
csv_file <- "../resources/data/seq.csv"  # Fichier CSV en entrée
output_yaml <- "../resources/datavzrd/seq.yaml"  # Fichier YAML en sortie
delimiter <- "\";\""  # Encadrer explicitement par des guillemets
use_yte <- unname(as.logical("true"))  # Forcer true sans transformation en yes
# Charger le fichier CSV pour détecter les colonnes
df <- read_delim(csv_file, delim = delimiter) %>%
dplyr::rename(Cluster=seq.part_dynamic_diss_best)%>%
mutate(across(everything(), ~na_if(., "%")))
delimiter
rm(list = ls())
library(yaml)
library(readr)
library(dplyr)
# Snakemake gère les fichiers d'entrée et de sortie
csv_file <- "../resources/data/seq.csv"  # Fichier CSV en entrée
output_yaml <- "../resources/datavzrd/seq.yaml"  # Fichier YAML en sortie
delimiter <- ";"  # Encadrer explicitement par des guillemets
delimiter2 <- "\";\""  # Encadrer explicitement par des guillemets
use_yte <- unname(as.logical("true"))  # Forcer true sans transformation en yes
# Charger le fichier CSV pour détecter les colonnes
df <- read_delim(csv_file, delim = delimiter) %>%
dplyr::rename(Cluster=seq.part_dynamic_diss_best)%>%
mutate(across(everything(), ~na_if(., "%")))
# Construire la structure du YAML
config <- list(
"__use_yte__" = use_yte,
"datasets" = list(
"seq" = list(
"path" = "?input.table",
"separator" = delimiter2
)
),
"views" = list(
"seq" = list(
"dataset" = "seq",
"render-table" = list(
"columns" = list()
)
)
)
)
# Ajouter les colonnes après dataset et render-table
for (col in names(df)) {
config$views$seq$`render-table`$columns[[col]] <- list(
"plot" = list(
"heatmap" = list(
"scale" = "ordinal",
"color-scheme" = "category10"
)
)
)
}
# Enregistrer le fichier YAML
write_yaml(config, output_yaml)
cat(sprintf("File %s has been created !\n", output_yaml))
!!use_yte
rm(list = ls())
library(yaml)
library(readr)
library(dplyr)
# Snakemake gère les fichiers d'entrée et de sortie
csv_file <- "../resources/data/seq.csv"  # Fichier CSV en entrée
output_yaml <- "../resources/datavzrd/seq.yaml"  # Fichier YAML en sortie
delimiter <- ";"  # Encadrer explicitement par des guillemets
delimiter2 <- "\";\""  # Encadrer explicitement par des guillemets
use_yte <- unname(as.logical("true"))  # Forcer true sans transformation en yes
# Charger le fichier CSV pour détecter les colonnes
df <- read_delim(csv_file, delim = delimiter) %>%
dplyr::rename(Cluster=seq.part_dynamic_diss_best)%>%
mutate(across(everything(), ~na_if(., "%")))
# Construire la structure du YAML
config <- list(
"__use_yte__" = !!use_yte,
"datasets" = list(
"seq" = list(
"path" = "?input.table",
"separator" = delimiter2
)
),
"views" = list(
"seq" = list(
"dataset" = "seq",
"render-table" = list(
"columns" = list()
)
)
)
)
# Ajouter les colonnes après dataset et render-table
for (col in names(df)) {
config$views$seq$`render-table`$columns[[col]] <- list(
"plot" = list(
"heatmap" = list(
"scale" = "ordinal",
"color-scheme" = "category10"
)
)
)
}
# Enregistrer le fichier YAML
write_yaml(config, output_yaml)
cat(sprintf("File %s has been created !\n", output_yaml))
rm(list = ls())
library(yaml)
library(readr)
library(dplyr)
# Snakemake gère les fichiers d'entrée et de sortie
csv_file <- "../resources/data/seq.csv"  # Fichier CSV en entrée
output_yaml <- "../resources/datavzrd/seq.yaml"  # Fichier YAML en sortie
delimiter <- ";"  # Encadrer explicitement par des guillemets
use_yte <- "true"  # Forcer true sans transformation en yes
# Charger le fichier CSV pour détecter les colonnes
df <- read_delim(csv_file, delim = delimiter) %>%
dplyr::rename(Cluster=seq.part_dynamic_diss_best)%>%
mutate(across(everything(), ~na_if(., "%")))
# Construire la structure du YAML
config <- list(
"__use_yte__" = !!use_yte,
"datasets" = list(
"seq" = list(
"path" = "?input.table",
"separator" = "\";"
)
),
"views" = list(
"seq" = list(
"dataset" = "seq",
"render-table" = list(
"columns" = list()
)
)
)
)
rm(list = ls())
library(yaml)
library(readr)
library(dplyr)
# Snakemake gère les fichiers d'entrée et de sortie
csv_file <- "../resources/data/seq.csv"  # Fichier CSV en entrée
output_yaml <- "../resources/datavzrd/seq.yaml"  # Fichier YAML en sortie
delimiter <- ";"  # Encadrer explicitement par des guillemets
use_yte <- "true"  # Forcer true sans transformation en yes
# Charger le fichier CSV pour détecter les colonnes
df <- read_delim(csv_file, delim = delimiter) %>%
dplyr::rename(Cluster=seq.part_dynamic_diss_best)%>%
mutate(across(everything(), ~na_if(., "%")))
# Construire la structure du YAML
config <- list(
"__use_yte__" = use_yte,
"datasets" = list(
"seq" = list(
"path" = "?input.table",
"separator" = "\";"
)
),
"views" = list(
"seq" = list(
"dataset" = "seq",
"render-table" = list(
"columns" = list()
)
)
)
)
# Ajouter les colonnes après dataset et render-table
for (col in names(df)) {
config$views$seq$`render-table`$columns[[col]] <- list(
"plot" = list(
"heatmap" = list(
"scale" = "ordinal",
"color-scheme" = "category10"
)
)
)
}
# Enregistrer le fichier YAML
write_yaml(config, output_yaml)
cat(sprintf("File %s has been created !\n", output_yaml))
rm(list = ls())
library(yaml)
library(readr)
library(dplyr)
# Snakemake gère les fichiers d'entrée et de sortie
csv_file <- "../resources/data/seq.csv"  # Fichier CSV en entrée
output_yaml <- "../resources/datavzrd/seq.yaml"  # Fichier YAML en sortie
delimiter <- ";"  # Encadrer explicitement par des guillemets
use_yte <- TRUE  # Forcer true sans transformation en yes
# Charger le fichier CSV pour détecter les colonnes
df <- read_delim(csv_file, delim = delimiter) %>%
dplyr::rename(Cluster=seq.part_dynamic_diss_best)%>%
mutate(across(everything(), ~na_if(., "%")))
# Construire la structure du YAML
config <- list(
"__use_yte__" = !!use_yte,
"datasets" = list(
"seq" = list(
"path" = "?input.table",
"separator" = "\";"
)
),
"views" = list(
"seq" = list(
"dataset" = "seq",
"render-table" = list(
"columns" = list()
)
)
)
)
# Ajouter les colonnes après dataset et render-table
for (col in names(df)) {
config$views$seq$`render-table`$columns[[col]] <- list(
"plot" = list(
"heatmap" = list(
"scale" = "ordinal",
"color-scheme" = "category10"
)
)
)
}
# Enregistrer le fichier YAML
write_yaml(config, output_yaml)
cat(sprintf("File %s has been created !\n", output_yaml))
print(config)
use_yte <-tolower(TRUE)  # Forcer true sans transformation en yes
# Charger le fichier CSV pour détecter les colonnes
df <- read_delim(csv_file, delim = delimiter) %>%
dplyr::rename(Cluster=seq.part_dynamic_diss_best)%>%
mutate(across(everything(), ~na_if(., "%")))
# Construire la structure du YAML
config <- list(
"__use_yte__" = !!use_yte,
"datasets" = list(
"seq" = list(
"path" = "?input.table",
"separator" = "\";"
)
),
"views" = list(
"seq" = list(
"dataset" = "seq",
"render-table" = list(
"columns" = list()
)
)
)
)
# Construire la structure du YAML
config <- list(
"__use_yte__" = use_yte,
"datasets" = list(
"seq" = list(
"path" = "?input.table",
"separator" = "\";"
)
),
"views" = list(
"seq" = list(
"dataset" = "seq",
"render-table" = list(
"columns" = list()
)
)
)
)
# Ajouter les colonnes après dataset et render-table
for (col in names(df)) {
config$views$seq$`render-table`$columns[[col]] <- list(
"plot" = list(
"heatmap" = list(
"scale" = "ordinal",
"color-scheme" = "category10"
)
)
)
}
config
rm(list = ls())
library(yaml)
library(readr)
library(dplyr)
# Snakemake gère les fichiers d'entrée et de sortie
csv_file <- "../resources/data/seq.csv"  # Fichier CSV en entrée
output_yaml <- "../resources/datavzrd/seq.yaml"  # Fichier YAML en sortie
delimiter <- ";"  # Encadrer explicitement par des guillemets
use_yte <-tolower(TRUE)  # Forcer true sans transformation en yes
# Charger le fichier CSV pour détecter les colonnes
df <- read_delim(csv_file, delim = delimiter) %>%
dplyr::rename(Cluster=seq.part_dynamic_diss_best)%>%
mutate(across(everything(), ~na_if(., "%")))
# Construire la structure du YAML
config <- list(
"__use_yte__" = use_yte,
"datasets" = list(
"seq" = list(
"path" = "?input.table",
"separator" = "\";"
)
),
"views" = list(
"seq" = list(
"dataset" = "seq",
"render-table" = list(
"columns" = list()
)
)
)
)
# Ajouter les colonnes après dataset et render-table
for (col in names(df)) {
config$views$seq$`render-table`$columns[[col]] <- list(
"plot" = list(
"heatmap" = list(
"scale" = "ordinal",
"color-scheme" = "category10"
)
)
)
}
# Enregistrer le fichier YAML
write_yaml(config, output_yaml)
cat(sprintf("File %s has been created !\n", output_yaml))
write_yaml()
?write_yaml
View(df)
View(df)
